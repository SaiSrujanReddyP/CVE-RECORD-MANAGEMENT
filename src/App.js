import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import {
  AppBar, Toolbar, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, Select, MenuItem, FormControl, InputLabel, DialogContentText,
} from '@mui/material';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import Home from './components/Home';
import View from './components/View';

// Custom MUI theme
const theme = createTheme({
  palette: {
    primary: {
      main: '#54accc',
    },
    secondary: {
      main: '#dc004e',
    },
  },
});

function App() {
  const [open, setOpen] = useState(false);
  const [deleteOpen, setDeleteOpen] = useState(false);
  const [editIndex, setEditIndex] = useState(null);
  const [cveRecords, setCveRecords] = useState([]);
  const [form, setForm] = useState({
    cveId: '',
    severity: '',
    cvss: '',
    affectedPackages: '',
    cweId: '',
  });
  const [formErrors, setFormErrors] = useState({});
  const [deleteIndex, setDeleteIndex] = useState(null);

  const handleClickOpen = () => {
    setEditIndex(null);
    setForm({
      cveId: '',
      severity: '',
      cvss: '',
      affectedPackages: '',
      cweId: '',
    });
    setFormErrors({});
    setOpen(true);
  };

  const handleEditOpen = (index) => {
    setEditIndex(index);
    setForm(cveRecords[index]);
    setFormErrors({});
    setOpen(true);
  };

  const handleClose = () => setOpen(false);
  const handleDeleteClose = () => setDeleteOpen(false);

  const validateForm = () => {
    const errors = {};
    if (!/^CVE-\d{4}-\d{1,}$/.test(form.cveId)) {
      errors.cveId = 'CVE-ID must be in the format CVE-YYYY-NNNNN...';
    }
    if (!/^CWE-\d+$/.test(form.cweId)) {
      errors.cweId = 'CWE-ID must start with "CWE-" followed by digits';
    }
    if (!form.severity) {
      errors.severity = 'Severity is required';
    }
    if (form.cvss === '' || isNaN(form.cvss) || parseFloat(form.cvss) < 0 || parseFloat(form.cvss) > 10) {
      errors.cvss = 'CVSS must be a number between 0 and 10';
    }
    if (!form.affectedPackages) {
      errors.affectedPackages = 'Affected Packages is required';
    }
    return errors;
  };

  const handleSave = () => {
    const errors = validateForm();
    if (Object.keys(errors).length > 0) {
      setFormErrors(errors);
      return;
    }

    if (editIndex !== null) {
      const updatedRecords = [...cveRecords];
      updatedRecords[editIndex] = form;
      setCveRecords(updatedRecords);
    } else {
      setCveRecords([...cveRecords, form]);
    }

    setForm({
      cveId: '',
      severity: '',
      cvss: '',
      affectedPackages: '',
      cweId: '',
    });
    setOpen(false);
  };

  const handleDelete = () => {
    const updatedRecords = [...cveRecords];
    updatedRecords.splice(deleteIndex, 1);
    setCveRecords(updatedRecords);
    setDeleteOpen(false);
  };

  return (
    <ThemeProvider theme={theme}>
      <Router>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" style={{ flexGrow: 1 }}>
              CVE Management 
            </Typography>
            <Button color="inherit" component={Link} to="/">Home</Button>
            <Button color="inherit" component={Link} to="/view">View</Button>
          </Toolbar>
        </AppBar>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/view" element={
            <View 
              cveRecords={cveRecords} 
              onEdit={handleEditOpen} 
              onDelete={(index) => { setDeleteIndex(index); setDeleteOpen(true); }} 
              onAdd={handleClickOpen}
            />
          } />
        </Routes>

        <Dialog open={open} onClose={handleClose}>
          <DialogTitle>{editIndex !== null ? 'Edit CVE Record' : 'Add CVE Record'}</DialogTitle>
          <DialogContent>
            <TextField
              autoFocus
              margin="dense"
              name="cveId"
              label="CVE-ID (e.g., CVE-2023-23455)"
              type="text"
              fullWidth
              value={form.cveId}
              onChange={(e) => setForm({ ...form, cveId: e.target.value })}
              error={!!formErrors.cveId}
              helperText={formErrors.cveId}
            />
            <FormControl fullWidth margin="dense">
              <InputLabel>Severity</InputLabel>
              <Select
                name="severity"
                value={form.severity}
                onChange={(e) => setForm({ ...form, severity: e.target.value })}
                error={!!formErrors.severity}
              >
                <MenuItem value="low">Low</MenuItem>
                <MenuItem value="medium">Medium</MenuItem>
                <MenuItem value="high">High</MenuItem>
                <MenuItem value="critical">Critical</MenuItem>
              </Select>
            </FormControl>
            <TextField
              margin="dense"
              name="cvss"
              label="CVSS"
              type="number"
              fullWidth
              value={form.cvss}
              onChange={(e) => setForm({ ...form, cvss: e.target.value })}
              error={!!formErrors.cvss}
              helperText={formErrors.cvss}
            />
            <TextField
              margin="dense"
              name="affectedPackages"
              label="Affected Packages"
              type="text"
              fullWidth
              value={form.affectedPackages}
              onChange={(e) => setForm({ ...form, affectedPackages: e.target.value })}
              error={!!formErrors.affectedPackages}
              helperText={formErrors.affectedPackages}
            />
            <TextField
              margin="dense"
              name="cweId"
              label="CWE-ID"
              type="text"
              fullWidth
              value={form.cweId}
              onChange={(e) => setForm({ ...form, cweId: e.target.value })}
              error={!!formErrors.cweId}
              helperText={formErrors.cweId}
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={handleClose} color="primary">Cancel</Button>
            <Button onClick={handleSave} color="primary">Save</Button>
          </DialogActions>
        </Dialog>

        <Dialog open={deleteOpen} onClose={handleDeleteClose}>
          <DialogTitle>Delete CVE Record</DialogTitle>
          <DialogContent>
            <DialogContentText>Are you sure you want to delete this record?</DialogContentText>
          </DialogContent>
          <DialogActions>
            <Button onClick={handleDeleteClose} color="primary">Cancel</Button>
            <Button onClick={handleDelete} color="secondary">Delete</Button>
          </DialogActions>
        </Dialog>
      </Router>
    </ThemeProvider>
  );
}

export default App;